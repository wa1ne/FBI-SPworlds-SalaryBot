from discord.ui import View, Button, Modal, TextInput
from discord.ext import commands, tasks
from discord.ext import commands
from discord import app_commands
from dotenv import load_dotenv
from datetime import datetime

import cards_list
import requests
import asyncio
import discord
import os
import io


load_dotenv()
TOKEN = os.getenv('TOKEN')
BOT_TOKEN = os.getenv('BOT_TOKEN')
GUILD_ID = int(os.getenv('GUILD_ID'))
ALLOWED_USER_IDS = [int(id) for id in os.getenv('ALLOWED_USER_IDS').split(',')]
LOGS_ID = int(os.getenv('LOGS_ID'))

headers = {
    'Authorization': os.getenv('KEY')
}

bot = commands.Bot(command_prefix='!', intents=discord.Intents.default())
cards = []

def check_permission(interaction):
    allowed_users = ALLOWED_USER_IDS
    return interaction.user.id in allowed_users

def addCard(data):
    pairs = data.split()
    for pair in pairs:
        card, nickname = pair.split(':')
        cards_list.addCard(card, nickname)

def removeCard(data):
    cards = data.split()
    for card in cards:
        if card.isdigit() == True:
            cards_list.removeCard(card)
        else:
            cards_list.removeCardbyName(card)

def getCards():
    cards = cards_list.getCards()
    formatted_cards = [f"`{card.split(':')[1]}`:{card.split(':')[0]}" for card in cards]
    return " ".join(formatted_cards) + "\n"

def getBalance():
    balLink = 'https://spworlds.ru/api/public/card'
    res = requests.get(balLink, headers=headers)
    balance = res.json()['balance']
    return f'> üè¶ –ë–∞–ª–∞–Ω—Å –∫–∞–∑–Ω—ã: `{balance}`\n'

def Transaction(nickname):
    payback = {
        'receiver': nickname['card'],
        'amount': nickname['amount'],
        'comment': f'–ó–ü –§–ë–†: {nickname["name"]}'
    }
    transLink = 'https://spworlds.ru/api/public/transactions'
    post = requests.post(transLink, headers=headers, json=payback)
    return post

def importCards(data):
    pairs = data.split()
    for pair in pairs:
        card, amount = pair.split(':')
        name = cards_list.getName(card)
        if name is None:
            return 0
        trans = {
            'card': card,
            'name': name[0],
            'amount': int(amount)
        }
        cards.append(trans)
    return 1


async def deny_access(interaction):
    message = await interaction.response.send_message('> ‚ùå –û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ', ephemeral=True)
    await asyncio.sleep(5)
    await message.delete()

class SearchButtonView(View):
    def __init__(self):
        super().__init__(timeout=None)

    @discord.ui.button(label='–ù–∞–π—Ç–∏', style=discord.ButtonStyle.blurple, custom_id='search_button')
    async def search_button(self, interaction: discord.Interaction, button: Button):
        await interaction.response.send_modal(SearchModal())

class SearchModal(Modal):
    def __init__(self):
        super().__init__(title='–ü–æ–∏—Å–∫ –∫–∞—Ä—Ç—ã')
        self.search_input = TextInput(label='–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –∏–ª–∏ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã')
        self.add_item(self.search_input)

    async def on_submit(self, interaction: discord.Interaction):
        query = self.search_input.value
        result = searchCard(query)
        await interaction.response.send_message(result, ephemeral=True)

def searchCard(query):
    cards = cards_list.getCards()
    for card in cards:
        card_number, nickname = card.split(':')
        if query == card_number or query == nickname:
            return f'> ‚úÖ –ù–∞–π–¥–µ–Ω–æ ```{nickname} : {card_number}```'
    return '> ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ'

async def sendLogs(string, avatar_url, avatar_name, logType):
    channel = bot.get_channel(LOGS_ID)
    today = datetime.today().strftime("%d.%m")
    if logType == 'salary':
        embed_string = f'üí∏ –ó–∞—Ä–ø–ª–∞—Ç–∞ –≤—ã–¥–∞–Ω–∞\n```'
        try:
            pairs = string.split()
            for pair in pairs:
                card, amount = pair.split(':')
                nickname = str(cards_list.getName(card))
                embed_string += f'{nickname[2:-3]} : {amount} –ê–†\n'
            embed_string += '```'
            embed = discord.Embed(description=embed_string, color=discord.Color.green())
            embed.set_footer(text='–í—ã–¥–∞–Ω–æ ' + avatar_name + f' ‚Ä¢ {today}', icon_url=avatar_url)
            await channel.send(embed=embed)       
        except:
            print(f'> –û—à–∏–±–∫–æ –ø–æ—Å—Ö–∞–ª–∫–æ –∫–∞—Ä–æ—á–µ')
            await channel.send(f'> –û—à–∏–±–∫–æ –ø–æ—Å—Ö–∞–ª–∫–æ –∫–∞—Ä–æ—á–µ') 
    if logType == 'add_card':
        embed_string = f'‚ûï –ö–∞—Ä—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞\n```'
        pairs = string.split()
        for pair in pairs:
            card, name = pair.split(':')
            embed_string += f'{card} : {name}\n'
        embed_string += '```'
        embed = discord.Embed(description=embed_string, color=discord.Color.blue())
        embed.set_footer(text='–î–æ–±–∞–≤–ª–µ–Ω–æ ' + avatar_name + f' ‚Ä¢ {today}', icon_url=avatar_url)
        await channel.send(embed=embed) 
    if logType == 'remove_card':
        embed_string = f'‚ûñ –ö–∞—Ä—Ç–∞ —É–¥–∞–ª–µ–Ω–∞\n```'
        pairs = string.split()
        for pair in pairs:
            nickname = str(cards_list.getName(pair))
            print(nickname)
            embed_string += f'{pair} : {nickname[2:-3]}\n'
        embed_string += '```'
        embed = discord.Embed(description=embed_string, color=discord.Color.red())
        embed.set_footer(text='–£–¥–∞–ª–µ–Ω–æ ' + avatar_name + f' ‚Ä¢ {today}', icon_url=avatar_url)
        await channel.send(embed=embed)       


@bot.event
async def on_ready():
    await bot.change_presence(activity=discord.Game(name="–ê–∫—Ç–∏–≤–µ–Ω!"))
    print(f'{bot.user} –ø–æ–¥—Ä—É–±–ª–µ–Ω!')
    await bot.tree.sync(guild=discord.Object(id=GUILD_ID))

@bot.tree.command(name="menu", description="–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã", guild=discord.Object(id=GUILD_ID))
async def cmdMenu(interaction: discord.Interaction):
    if not check_permission(interaction):
        await deny_access(interaction)
        return

    commands = [
        '`balance` - –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å –∫–∞–∑–Ω—ã',
        '`salary` - –í—ã–¥–∞—Ç—å –∑–∞—Ä–ø–ª–∞—Ç—É. –°–∏–Ω—Ç–∞–∫—Å–∏—Å –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:—Å—É–º–º–∞',
        '`card_list` - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤',
        '`add_card` - –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É(—ã). –°–∏–Ω—Ç–∞–∫—Å–∏—Å –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:–Ω–∏–π–Ω–µ–π–º',
        '`remove_card` - –£–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç—É(—ã). –°–∏–Ω—Ç–∞–∫—Å–∏—Å: –Ω–∏–∫–Ω–µ–π–º/–Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã'
    ]
    command_list = "\n".join(commands)
    with open('icon.png', 'rb') as icon_file:
        icon_data = icon_file.read()
        icon_bytes = io.BytesIO(icon_data)

        embed = discord.Embed(title="üìÉ –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥", description=command_list, color=discord.Color.blue())
        embed.set_thumbnail(url="attachment://icon.png")
        user = await bot.fetch_user(512645963727372290)
        avatar_url = user.display_avatar.url
        embed.set_footer(text='Made by @wa1ne', icon_url=avatar_url)

        await interaction.response.send_message(embed=embed, file=discord.File(icon_bytes, "icon.png"), ephemeral=True)


@bot.tree.command(name="balance", description="–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å –∫–∞–∑–Ω—ã", guild=discord.Object(id=GUILD_ID))
async def cmdBalance(interaction: discord.Interaction):
    if not check_permission(interaction):
        await deny_access(interaction)
        return
    balance = getBalance()
    await interaction.response.send_message(balance, ephemeral=True)

@bot.tree.command(name="salary", description="–í—ã–¥–∞—Ç—å –∑–∞—Ä–ø–ª–∞—Ç—É", guild=discord.Object(id=GUILD_ID))
async def cmdSalary(interaction: discord.Interaction, trans_string: str):
    if not check_permission(interaction):
        await deny_access(interaction)
        return
    imported = importCards(trans_string)
    if imported == 1:
        for card in cards:
            Transaction(card)
        cards.clear()
        await interaction.response.send_message('> ‚úÖ –ó–∞—Ä–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω–∞!', ephemeral=True)
        member = interaction.user
        avatar_url = member.avatar.url if member.avatar else member.default_avatar.url
        avatar_name = member.display_name
        await sendLogs(trans_string, avatar_url, avatar_name, logType='salary')
    else:
        await interaction.response.send_message('> ‚ùå –û–¥–Ω–∞/–ù–µ—Å–∫–æ–ª—å–∫–æ –∏–∑ –∑–∞–¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/add_card`, —á—Ç–æ–±—ã —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å', ephemeral=True)
        await asyncio.sleep(5)
        await interaction.delete_original_response()

@bot.tree.command(name="card_list", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç", guild=discord.Object(id=GUILD_ID))
async def cmdGetCards(interaction: discord.Interaction):
    if not check_permission(interaction):
        await deny_access(interaction)
        return
    card_list = getCards()
    embed = discord.Embed(title='üìÑ –ö–∞—Ä—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤', description=card_list, color=discord.Color.blue())
    view = SearchButtonView()
    await interaction.response.send_message(embed=embed, view=view, ephemeral=True)

@bot.tree.command(name="add_card", description="–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É", guild=discord.Object(id=GUILD_ID))
async def cmdAddCard(interaction: discord.Interaction, card_string: str):
    if not check_permission(interaction):
        await deny_access(interaction)
        return 
    addCard(card_string)
    await interaction.response.send_message('> ‚úÖ –ö–∞—Ä—Ç–∞(—ã) —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞(—ã)!', ephemeral=True)
    member = interaction.user
    avatar_url = member.avatar.url if member.avatar else member.default_avatar.url
    avatar_name = member.display_name
    await sendLogs(card_string, avatar_url, avatar_name, logType='add_card')
    await asyncio.sleep(5)
    await interaction.delete_original_response()

@bot.tree.command(name="remove_card", description="–£–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç—É", guild=discord.Object(id=GUILD_ID))
async def cmdRemoveCard(interaction: discord.Interaction, card_string: str):
    if not check_permission(interaction):
        await deny_access(interaction)
        return
    card_id = card_string
    print(f'id = {card_id}')
    await interaction.response.send_message('> ‚úÖ –ö–∞—Ä—Ç–∞(—ã) —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞(—ã)!', ephemeral=True)
    member = interaction.user
    avatar_url = member.avatar.url if member.avatar else member.default_avatar.url
    avatar_name = member.display_name
    await sendLogs(card_id, avatar_url, avatar_name, logType='remove_card')
    removeCard(card_string)
    await asyncio.sleep(5)
    await interaction.delete_original_response()


@bot.tree.command(name="clear", description="–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è", guild=discord.Object(id=GUILD_ID))
@app_commands.describe(amount="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", message_id="ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
async def clear(interaction: discord.Interaction, amount: int = None, message_id: str = None):
    if not interaction.user.id == 512645963727372290:
        await interaction.response.send_message('> ‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π.', ephemeral=True)
        return

    if amount is None and message_id is None:
        await interaction.response.send_message('> ‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ ID —Å–æ–æ–±—â–µ–Ω–∏—è.', ephemeral=True)
        return

    if amount is not None and amount <= 0:
        await interaction.response.send_message('> ‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π.', ephemeral=True)
        return

    await interaction.response.defer(ephemeral=True)

    if message_id is not None:
        try:
            message = await interaction.channel.fetch_message(int(message_id))
            await message.delete()
            await interaction.followup.send(f'> ‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å ID `{message_id}` —É–¥–∞–ª–µ–Ω–æ.', ephemeral=True)
        except discord.NotFound:
            await interaction.followup.send('> ‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.', ephemeral=True)
        except discord.Forbidden:
            await interaction.followup.send('> ‚ùå –£ –º–µ–Ω—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.', ephemeral=True)
        except discord.HTTPException as e:
            await interaction.followup.send(f'> ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}', ephemeral=True)
    else:
        deleted = await interaction.channel.purge(limit=amount)
        await interaction.followup.send(f'> ‚úÖ –£–¥–∞–ª–µ–Ω–æ {len(deleted)} —Å–æ–æ–±—â–µ–Ω–∏–π.', ephemeral=True)

if __name__ == '__main__':
    cards_list.open_connection()
    bot.run(BOT_TOKEN)
    
